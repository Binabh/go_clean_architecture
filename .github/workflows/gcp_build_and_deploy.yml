name: Build and deploy Go clean architecture application

on:
  push:
    branches:
      - BAC-*
      - main
      - develop
    tags:
      - v*

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.get_env.outputs.env }}
    env:
     GITHUB_REF: ${{ github.ref }}
    steps:

    - id: get_env
      run: |
        if grep -q "refs/tags/v" <<< $GITHUB_REF; then
          echo "::set-output name=env::PROD"
        else
          echo "::set-output name=env::DEV"
        fi

    - id: print_env
      name: Print environment
      run: echo  "Environment :- ${{ steps.get_env.outputs.env }}"

  build_and_deploy:
    name: Build and deploy the go-clean-architecture repository
    runs-on: ubuntu-latest
    needs: setup_environment
    environment: ${{needs.setup_environment.outputs.env_name}}
    steps:
      - uses: actions/checkout@v2

      - name: Use golang ${{matrix.go-version}}
        uses: actions/setup-go@v2
        with:
          go-version: '^1.18'
      - run: go version
      
      - name: Set up MySQL
        run: |
          sudo systemctl start mysql
          mysql -e 'CREATE DATABASE clean_architecture;' -uroot -proot
          mysql -e "show databases;" -uroot -proot

      - name: Initialize the environment variables for testing
        run: |
          echo "ENVIRONMENT=local
          SERVER_PORT=8080
          DB_HOST=localhost
          DB_PORT=3306
          DB_NAME=clean_architecture
          DB_USER=root
          DB_PASS=root
          DEBUG_PORT=5002     
          " > .env

      - name: Initialize service account key file
        run: |
          echo '{
            "type": "${{secrets.TYPE_SERVICE_ACCOUNT_KEY}}",
            "project_id": "${{secrets.PROJECT_ID_SERVICE_ACCOUNT_KEY}}",
            "private_key": "${{secrets.PRIVATE_KEY_SERVICE_ACCOUNT_KEY}}",
            "private_key_id": "${{secrets.PRIVATE_KEY_ID_SERVICE_ACCOUNT_KEY}}",
            "client_email": "${{secrets.CLIENT_EMAIL_SERVICE_ACCOUNT_KEY}}",
            "client_id": "${{secrets.CLIENT_ID_SERVICE_ACCOUNT_KEY}}",
            "auth_uri": "${{secrets.AUTH_URI_SERVICE_ACCOUNT_KEY}}",
            "token_uri": "${{secrets.TOKEN_URI_SERVICE_ACCOUNT_KEY}}",
            "auth_provider_x509_cert_url": "${{secrets.AUTH_PROVIDER_X509_CERT_URL_SERVICE_ACCOUNT_KEY}}",
            "client_x509_cert_url": "${{secrets.CLIENT_X509_CERT_URL_SERVICE_ACCOUNT_KEY}}"
          }' > serviceAccountKey.json
          
      - name: Build the repository
        run: go build main.go

      - name: Start the service
        run: |
          ./main &

      - name: Validate if the service is working or not via health check api
        run: |
          sleep 5
          curl http://localhost:8080/health-check
     
      - name: Initialize the environment variables with deployment env
        run: |
          rm -rf .env
          echo "ENVIRONMENT=${{secrets.ENVIRONMENT}}
          SERVER_PORT=8080
          DB_HOST=${{secrets.DB_HOST}}
          DB_PORT=${{secrets.DB_PORT}}
          DB_NAME=${{secrets.DB_NAME}}
          DB_USER=${{secrets.DB_USER}}
          DB_PASS=${{secrets.DB_PASS}}
          DEBUG_PORT=5002     
          " > .env

      - name: Setup Cloud SDK
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')) }}
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCLOUD_SERVICE_KEY }}
      
      - name: Deploy to App Engine
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')) }}
        run: gcloud app deploy app.yaml --quiet --project ${{secrets.GCP_PROJECT_ID}}


      - name: Slack Notification on SUCCESS
        if: success()
        uses: tokorom/action-slack-incoming-webhook@main
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          text: A job for go_clean_architecture has succeeded :tada:.
          attachments: |
            [
              {
                "color": "good",
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "fields": [
                  {
                    "title": "Commit Message",
                    "value": "${{ github.event.head_commit.message }}"
                  },
                  {
                    "title": "GitHub Actions URL",
                    "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "title": "Compare URL",
                    "value":  "${{ github.event.compare }}"
                  }
                ]
              }
            ] 
      - name: Slack Notification on FAILURE
        if: failure()
        uses: tokorom/action-slack-incoming-webhook@main
        env:
          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          text: A build and *deploy job for go_clean_architecture has failed :crying_cat_face:.
          attachments: |
            [
              {
                "color": "danger",
                "author_name": "${{ github.actor }}",
                "author_icon": "${{ github.event.sender.avatar_url }}",
                "fields": [
                  {
                    "title": "Commit Message",
                    "value": "${{ github.event.head_commit.message }}"
                  },
                  {
                    "title": "GitHub Actions URL",
                    "value": "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "title": "Compare URL",
                    "value":  "${{ github.event.compare }}"
                  }
                ]
              }
            ] 